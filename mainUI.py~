#/usr/bin/env python
# -*- coding: utf-8 -*-
# created by wuzebang 2013/12/30
# 用来处理主界面

from PyQt4 import QtGui, QtCore
from PyQt4.QtGui import QTableWidget

from o_mainUI import Ui_Form
from showUI import MyShowWindow
import swift_test as swift
from util import listObject


# import my file
class MyForm(QtGui.QMainWindow):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        # 窗体居中显示，且大小不可变
        self.setFixedSize(792,752)
        width = QtGui.QApplication.desktop().width() - 792
        height = QtGui.QApplication.desktop().height() - 752
        self.move(width/2, height/2)
        
        self.ui = Ui_Form()
        self.ui.setupUi(self)
        
        # 获得上传下载界面，并隐藏
        self.showUI = MyShowWindow(self)
        self.showUI.hide()
        
        self.ui.frame.hide()
        self.count = 0  # 记录选中的个数
        self.initQTable()   # 初始化私人空间tableWidget
        
        ## 初始化组空间
        self.initGroup()
        
        # 绑定信号槽
        QtCore.QObject.connect(self.ui.uploadButton, QtCore.SIGNAL('clicked()'), self.uploadEvent)
        QtCore.QObject.connect(self.ui.showButton, QtCore.SIGNAL('clicked()'), self.showInfoWindow)
        QtCore.QObject.connect(self.ui.downloadButton, QtCore.SIGNAL('clicked()'), self.downloadEvent)
        QtCore.QObject.connect(self.ui.deleteButton, QtCore.SIGNAL('clicked()'), self.deleteEvent)
        QtCore.QObject.connect(self.ui.freshButton, QtCore.SIGNAL('clicked()'), self.freshEvent)
        QtCore.QObject.connect(self.ui.infoTable, QtCore.SIGNAL('itemClicked(QTableWidgetItem *)'), self.infoTableItemClicked)
        QtCore.QObject.connect(self.ui.checkBox, QtCore.SIGNAL('clicked()'), self.chooseAll)
        
        QtCore.QObject.connect(self.ui.groupList, QtCore.SIGNAL('itemClicked(QListWidgetItem *)'), self.groupListItemClicked)
        QtCore.QObject.connect(self.ui.groupTable, QtCore.SIGNAL('itemClicked(QTableWidgetItem *)'), self.groupTableItemClicked)
    
    def setUserInfo(self, result):
        import copy
        self.userInfo = copy.deepcopy(result)
        self.showUI.setUserInfo(result)
        del result
    
    
    def showFrame(self):
        '''
        show the bottom frame
        '''
        if self.count != 0:
            self.ui.frame.show()
            self.ui.checkBox.setText(str(self.count)+'selected')
            if self.count == self.ui.infoTable.rowCount():
                self.ui.checkBox.setChecked(True)
            else:
                self.ui.checkBox.setChecked(False)
        else:
            self.ui.frame.hide()
    
    
    def freshEvent(self):
        '''
        刷新列表
        '''
#         content = ['-A', 'http://127.0.0.1:8080/auth/v1.0', '-U', 'test:tester', '-K', 'testing','list', 'wzb', '--lh']
#         result = swift.opt(content)
#         if result != None:
#             self.count = 0
#             self.updateQTable(result)
        result = listObject(self.userInfo['Auth Token'], self.userInfo['StorageURL'], self.userInfo['username'])
        if result != None:
            self.count = 0
            self.updateQTable(result)
        
        print 'The selected item is : ' , self.ui.groupList.selectedItems()[0].text()
            
        
    def initQTable(self):
        '''
        初始化QTableWidget，设置一些基本的显示模式
        '''
        # 表项不可修改
        self.ui.infoTable.setEditTriggers(QTableWidget.NoEditTriggers)
        # 最后一列拉伸
        self.ui.infoTable.horizontalHeader().setStretchLastSection(True)
        # 设置整行选择
        self.ui.infoTable.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)
        # 设置第一列的宽度
        self.ui.infoTable.setColumnWidth(0, 23)
        self.ui.infoTable.setColumnWidth(1, 300)
        self.ui.infoTable.setColumnWidth(2, 120)
        # 设置隔行颜色不同
        self.ui.infoTable.setAlternatingRowColors(True)
        # 不显示网格线
        self.ui.infoTable.setShowGrid(False)
        
        # 添加水平表头
        self.ui.infoTable.setHorizontalHeaderLabels([u' ','filename','size','lastModified'])
        # 设置表头格式
        for n in range(self.ui.infoTable.columnCount()):
            headItem = self.ui.infoTable.horizontalHeaderItem(n)
            headItem.setTextAlignment(0x0001 | 0x0080)  # 设置表头内容居中靠左 QtCore.Qt.AlignLeft | QtCore.Qt.AlignHCenter
            headItem.setFont(QtGui.QFont("Helvetica"))
            headItem.setBackgroundColor(QtGui.QColor(0,68,10))
            headItem.setTextColor(QtGui.QColor(200,111,30))            
        
        
    def updateQTable(self, result):
        '''
        根据从云端获得的列表，更新显示
        '''
        count = len(result)
        self.ui.infoTable.setRowCount(count)
        for i in range(0, count):
            item = QtGui.QTableWidgetItem()
            item.setCheckState(QtCore.Qt.Unchecked)
            self.ui.infoTable.setItem(i, 0, item)   # 添加复选框
            
            item = QtGui.QTableWidgetItem(result[i]['name'])
            self.ui.infoTable.setItem(i, 1, item)
            
            item = QtGui.QTableWidgetItem()
            size = result[i]['byte_str']
            if 'G' not in size and 'M' not in size or 'K' not in size  or 'B' not in size:
                size = size + 'b'
            item.setText(size)
            self.ui.infoTable.setItem(i, 2, item)
            
            item = QtGui.QTableWidgetItem(result[i]['date'])
            self.ui.infoTable.setItem(i, 3, item)
            
            
    def infoTableItemClicked(self,item):
        """
        item复选框选中触发事件
        """
        row = item.row()
#         row = self.ui.infoTable.currentItem().row()
        if self.ui.infoTable.item(row,0).checkState() == QtCore.Qt.Checked:
            self.ui.infoTable.item(row,0).setCheckState(QtCore.Qt.Unchecked)
            self.count = self.count - 1
        else:
            self.ui.infoTable.item(row, 0).setCheckState(QtCore.Qt.Checked)
            self.count = self.count + 1
        
        self.showFrame()
        
        
    def showInfoWindow(self):
        '''
        显示上传下载界面
        '''
        if self.showUI != None:
            self.showUI.show()
        else:
            self.showUI = MyShowWindow(self)
            self.showUI.show()
#         self.showUI.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | self.showUI.windowFlags())
    
    
    def uploadEvent(self):
        """
        上传按钮点击后的触发事件，弹出上传界面窗口
        """
        fd = QtGui.QFileDialog(self)
        fd.setDirectory(QtCore.QString("/home/wzb/datamodel/upload/"))
        if fd.exec_() == QtGui.QDialog.Accepted:
            result = QtCore.QStringList(fd.selectedFiles())
            ans = []
            for i in range(result.count()):
                temp = repr(result[i])
                ans.append(temp)
            self.showUI.setFilenames(ans)
            del fd
            del result
            print repr(ans)
#             self.showUI.freshUploadTable()  # 更新显示表
            self.showUI.ui.tabWidget.setCurrentWidget(self.showUI.ui.tab)
            self.showInfoWindow()   # show上传下载界面
            
        else:
            print 'wrong'
                        
    
    def downloadEvent(self):
        '''
        下载按钮点击后的触发时间，开始下载
        '''
        print 'start to download'
        downloadFilenames = []
        for i in range(self.ui.infoTable.rowCount()):
            if self.ui.infoTable.item(i, 0).checkState() == QtCore.Qt.Checked:
                downloadFilenames.append(self.ui.infoTable.item(i, 1).text())
        
        import copy
        self.showUI.setDownloadFilenames(copy.deepcopy(downloadFilenames))
        del downloadFilenames
        self.showUI.ui.tabWidget.setCurrentWidget(self.showUI.ui.tab_2)
        self.showInfoWindow()   # show 下载界面
        
        
        
    def deleteEvent(self):
        '''
        删除选中对象
        '''
#         content = ['-A', 'http://127.0.0.1:8080/auth/v1.0', '-U', 'test:tester', '-K', 'testing','delete', 'wzb']
        content = ['--os-auth-token', self.userInfo['Auth Token'], '--os-storage-url', self.userInfo['StorageURL'], 'delete', self.userInfo['username']]
        for i in range(self.ui.infoTable.rowCount()):
            if self.ui.infoTable.item(i, 0).checkState() == QtCore.Qt.Checked:
                content.append(self.ui.infoTable.item(i, 1).text())
        
        # 执行删除对象
        swift.opt(content)
        self.count = 0  # 删除完毕，计数为0
        self.showFrame() # 隐藏frame
        
        # 删除完毕后回调更新列表
        self.freshEvent()
    
    
    def chooseAll(self):
        '''
        复选框全选/或全部取消
        '''
        if self.ui.checkBox.checkState() == QtCore.Qt.Checked:  # 选中状态
            print ''
            self.count = self.ui.infoTable.rowCount()
            self.showFrame()
            for i in range(self.count):
                self.ui.infoTable.item(i, 0).setCheckState(QtCore.Qt.Checked)
        else:
            print ''
            self.count = 0
            self.showFrame()
            for i in range(self.ui.infoTable.rowCount()):
                self.ui.infoTable.item(i, 0).setCheckState(QtCore.Qt.Unchecked)
                        
############################################################################################
############################################################################################
## 组空间处理方法

    def initGroup(self):
        '''
        初始化组空间的控件
        '''
        # 初始化 groupTable
        # 表项不可修改
        self.ui.groupTable.setEditTriggers(QTableWidget.NoEditTriggers)
        # 最后一列拉伸
        self.ui.groupTable.horizontalHeader().setStretchLastSection(True)
        # 设置整行选择
        self.ui.groupTable.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)
        # 设置第一列的宽度
        self.ui.groupTable.setColumnWidth(0, 23)
        self.ui.groupTable.setColumnWidth(1, 200)
        self.ui.groupTable.setColumnWidth(2, 80)
        self.ui.groupTable.setColumnWidth(3, 120)
        # 设置隔行颜色不同
        self.ui.groupTable.setAlternatingRowColors(True)
        # 不显示网格线
        self.ui.groupTable.setShowGrid(False)
        
        # 添加水平表头
        self.ui.groupTable.setHorizontalHeaderLabels([u' ','filename','size','lastModified', 'uploader'])
        # 设置表头格式
        for n in range(self.ui.groupTable.columnCount()):
            headItem = self.ui.groupTable.horizontalHeaderItem(n)
            headItem.setTextAlignment(0x0001 | 0x0080)  # 设置表头内容居中靠左 QtCore.Qt.AlignLeft | QtCore.Qt.AlignHCenter
            headItem.setFont(QtGui.QFont("Helvetica"))
            headItem.setBackgroundColor(QtGui.QColor(0,68,10))
            headItem.setTextColor(QtGui.QColor(200,111,30))      
        
        
        # 初始化listWidget
        self.ui.groupList.addItem("group1")
        self.ui.groupList.addItem("group2")
        self.ui.groupList.setSortingEnabled(True)
        
        
    def groupListItemClicked(self, item):
        '''
        grouplist中item点击，查看该group数据
        '''
        groupname = item.text()
        print groupname
        
    
    def groupTableItemClicked(self, item):
        '''
        groupTable中item选中或取消
        '''